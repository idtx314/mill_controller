#!/usr/bin/env python

"""
This script contains a ROS node that subscribes to csv_name_topic. When a String message is received over that topic, the node will parse it as the name of a .csv file in the mill_controller/trajectories/ directory. It will attempt to open that file at that location and parse the contents into a Trajectory message. The message will be published to the topic trajectory_input.
"""
'''
TODO
Add more advanced argument parsing, probably flag based. Current version is very delicate to unexpected input. Argparse would be a good module for this
'''

import rospkg
import rospy
import sys
import numpy as np
from std_msgs.msg import String
from mill_controller.msg import Trajectory


# Use this publisher to send the output
pub = rospy.Publisher('trajectory_input',Trajectory,queue_size=1)


def callback(input):
    # This function receives a string message as an argument. It interprets that string as the name of a csv file in the mill_controller/trajectories/ directory, opens the file, and parses the contained data into a Trajectory message. The Trajectory message is then published to /trajectory_input

    # Find package directory to locate trajectory csv.
    rospack = rospkg.RosPack()
    path = rospack.get_path('mill_controller') + '/trajectories/'+input.data

    # Read file into an array, splitting on commas
    try:
        arr = np.loadtxt(path, delimiter=',')
    except IOError:
        rospy.logerr("Error opening file. Path Invalid or malformed.")
        return 1
    except ValueError as e:
        rospy.logerr(e)
        return 1

    # Create Trajectory message
    msg = Trajectory()

    # Increment through each row of data and append the information into Trajectory message
    for row in range(arr.shape[0]):
        try:
            msg.x.append(arr[row][0])
            msg.y.append(arr[row][1])
            msg.z.append(arr[row][2])
            msg.t.append(arr[row][3])
        except ValueError:
            rospy.logerr("Unable to parse input in line "+str(msg.length+1))
            return 1
        msg.length += 1

    # Publish the message
    pub.publish(msg)




def main(args):
    # This function accepts arguments from the command line. If any are received it creates a string message with the argument as data and activates callback, passing the message. If no argument is received, it attempts to read a parameter. If the parameter is read and is not 'null', it creates a string message with the parameter as data and activates callback, passing the message. It then proceeds to spin.

    # Initialize the ROS node
    rospy.init_node("csv_parser_node")

    # If two arguments were passed, assume that user ran with file name input, create a message and pass it to callback()
    if len(args) == 2:
        msg = String()
        msg.data = args[1]
        callback(msg)
    else:
        # If a parameter was set, create a message and pass it to callback()
        param = rospy.get_param("csv_name", "null")
        if param != "null":
            msg = String()
            msg.data = param
            callback(msg)


    # Initialize the subscriber
    rospy.Subscriber('csv_name_topic', String, callback)

    # Spin until shut down
    rospy.spin()




if __name__ == '__main__':
    main(sys.argv)
