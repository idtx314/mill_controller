#!/usr/bin/env python

'''
This node subscribes to the Trajectory topic 'trajectory_input'. When a Trajectory message is received the contents are parsed into a GCode file named output.gcode, which is saved into the mill_controller directory. The node then publishes a message on the Bool topic 'gcode_ready_flag'. The node will not accept coordinates outside the 500mmx500mm machine workspace, but it presumes that the G54 workspace has been set up as described in the [Resetting the Workspace Origin] section of the README.
'''

'''
TODO
Add dry run option
Add warning for attempting to exceed machine speed limits (8000 mm/min)
'''

import numpy as np
import rospkg
import rospy
import sys
from std_msgs.msg import Bool
from mill_controller.msg import Trajectory


# Use this publisher to send the output flag
pub = rospy.Publisher('gcode_ready_flag',Bool,queue_size=1)



def callback(message):
    # Upon receiving a Trajectory message, parse the information and write a GCode file based on it.

    # Make a copy of message so that it can be modified
    msg = Trajectory()

    # Read parameters from the namespace or use reasonable defaults
    horizon_time = rospy.get_param("horizon_time", 0.0)
    width = rospy.get_param("m_width", 279.4)
    height = rospy.get_param("m_height", 215.9)
    theta = rospy.get_param("m_angle", 0.0)
    x_offset = rospy.get_param("x_offset", 0.0)
    y_offset = rospy.get_param("y_offset", 0.0)
    x_range = rospy.get_param("x_range")
    y_range = rospy.get_param("y_range")
    x_max = x_range[1]
    x_min = x_range[0]
    y_max = y_range[1]
    y_min = y_range[0]

    # Shift range limits so that range bottoms at zero
    x_max = x_max-x_min
    y_max = y_max-y_min

    # Compose Transformation matrix from material to machine space
    Twm = np.zeros((3,3))
    Twm[2,2] = 1.0
    Twm[0,0] = np.cos(np.deg2rad(theta))
    Twm[0,1] = -np.sin(np.deg2rad(theta))
    Twm[0,2] = x_offset
    Twm[1,0] = np.sin(np.deg2rad(theta))
    Twm[1,1] = np.cos(np.deg2rad(theta))
    Twm[1,2] = y_offset
    Twm[2,2] = 1.0

    # Get system directory for file locations
    rospack = rospkg.RosPack()
    path = rospack.get_path('mill_controller') + '/output.gcode'
    # Open output file
    f = open(path, 'w')

    # Write the Header
    s = ''

    # Basic Settings
    s = s + 'G90' + '\n'                    # Set absolute coordinates
    s = s + 'G21' + '\n'                    # Set mm
    s = s + 'G17' + '\n'                    # Set plane to x/y
    s = s + 'G94' + '\n'                    # Set feed rate to mm/min
    s = s + 'G54' + '\n'                    # Use WCS G54 Coordinates

    f.write(s)                              # Write to file



    # Write the Body

    # Interpolate from input ranges to material ranges
    x = message.x[0] - x_min
    y = message.y[0] - y_min
    x = x/x_max * width
    y = y/y_max * height

    # Transform from material space into machine space
    vector = np.ones((3,1))
    vector[0,0] = x
    vector[1,0] = y
    vector = Twm.dot(vector)

    # Add offsets for pen mounting from mill carriage position
    vector[0,0] += 49.8
    vector[1,0] += 14.2
    vector[2,0] = -48.0

    # Update saved values for next calculation
    oldvector = vector.copy()
    oldtime = message.t[0]

    # Set Feed rate and move to starting point.
    s = 'G0' + ' X' + str(vector[0,0]) + ' Y' + str(vector[1,0]) + ' F200\n'
    s = s + 'G0' + ' Z' + str(vector[2,0] + 5.0) + '\n'
    s = s + 'G1' + ' Z' + str(vector[2,0]) + ' F50' + '\n'

    f.write(s)


    # Follow trajectory. Operating on the assumption that the trajectory can be approximated as a series of straight line motions from point to point. Improvement of this model will probably need example trajectories to test.
    for index in range(1,message.length):
        # Interpolate from input ranges to material ranges
        x = message.x[index] - x_min
        y = message.y[index] - y_min
        x = x/x_max * width
        y = y/y_max * height

        # Transform from material space into machine space
        vector = np.ones((3,1))
        vector[0,0] = x
        vector[1,0] = y
        vector = Twm.dot(vector)

        # Add offsets for pen mounting from mill carriage position
        vector[0,0] += 49.8
        vector[1,0] += 14.2
        vector[2,0] =  -48.0

        # Calculate feed rate
        distance = np.linalg.norm(vector-oldvector)
        dt = message.t[index] - oldtime
        feed = distance/dt
        feed = feed * 60

        # Update saved values for next calculation
        oldvector = vector.copy()
        oldtime = message.t[index]

        # Check whether the commanded motions are within the limits of machine space.
        if(vector[0,0] > 500.0 or vector[0,0] < 0.0 or vector[1,0] > 500.0 or vector[1,0] < 0.0):
            rospy.logerr("Commanded coordinates are out of machine bounds. Aborting GCode write.")
            f.close()
            return 1

        # Check whether the command is from beyond the time horizon
        if(message.t[index] > horizon_time and horizon_time > 0.0):
            break

        # Compose gcode string
        s = 'G1' + ' X' + str(vector[0,0]) + ' Y' + str(vector[1,0]) + ' Z' + str(vector[2,0]) + ' F' + str(feed) + '\n'

        # Write command to output
        f.write(s)


    # Write the Footer
    s = ''
    s = s + 'G90' + '\n'                    # Set to absolute coordinates
    s = s + 'G21' + '\n'                    # Set to mm
    s = s + 'G17' + '\n'                    # Set plane to x/y
    s = s + 'G94' + '\n'                    # Set feed rate to mm/min
    s = s + 'G54' + '\n'                    # Use WCS G54 Coordinates

    s = s + 'G0 Z0' + '\n'                  # Move bit out of harms way
    s = s + 'G0 X450 Y500' + '\n'

    s = s + 'G4 P0.1' + '\n'                # Dwell for a moment
    f.write(s)                              # Write to file


    # Close output
    f.close()

    # Publish to a flag topic to trigger the next node.
    flag = Bool()
    flag.data = True
    pub.publish(flag)




def main():
    # Initialize the ROS node and Subscriber
    rospy.init_node("trajectory_parser_node")
    rospy.Subscriber('trajectory_input',Trajectory,callback)

    # Spin until shut down
    rospy.spin()





if __name__ == '__main__':
    main()
