#!/usr/bin/env python

"""
This node subscribes to the Image topic 'raw_image'. When an Image message is received the node converts it into an OpenCV image, performs image processing, converts it into a new Image message, and publishes the new message on the topic 'processed_image'.
"""
'''
TODO
adjust image dimensions of aligned images
Get threshold to auto adjust
Use item and itemset for getting and setting pixels
'''

import rospkg
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError


# Use this publisher to send the output
pub = rospy.Publisher('processed_image',Image,queue_size=1)

# Create a translator object to convert images
converter = CvBridge()

# Set threshold for color processing
threshold = 250


# Calibration Globals
_ws_hom = False
_ms_hom = False



def callback(input):
    global _ws_hom, _ms_hom
    # The callback accepts an Image message, performs visual processing, and publishes the result. Darker pixels will be changed to black, less-dark pixels will be made white.

    # Translate Image message into a cv2 image assuming bgr8 encoding. The image will revert to a more general CV encoding, like 8UC3.
    cv_image = converter.imgmsg_to_cv2(input,"bgr8")
    height, width = cv_image.shape[:2]
    m_width = rospy.get_param("m_width",279.4)
    m_height = rospy.get_param("m_height",215.9)
    m_ratio = m_height/m_width
    height2 = int(width*m_ratio)


    # Make a copy, as the original image will not be editable after conversion
    cv_image = cv_image.copy()

    # Apply homographies to warp the image
    semi_aligned_img = cv2.warpPerspective(cv_image, _ws_hom, (width,width))
    aligned_img = cv2.warpPerspective(semi_aligned_img, _ms_hom, (width,height2))

    # Perform visual processing on the image to extract relevant data.
    # Convert the aligned image to grayscale.
    gray_image = cv2.cvtColor(aligned_img, cv2.COLOR_BGR2GRAY)

    # Use Otsu's method to determine an appropriate threshold for the image and apply it to the grayscale image to produce a binary image.
    (thresh, mask_image) = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)

    # Use the binary image as a mask to set each pixel of the aligned image to white or black. Masked pixels should be black. Unmasked pixels should be white.
    # Extract a tuple containing the number of (rows, columns, channels).
    (rows,cols,chans)  = aligned_img.shape

    # Cycle through each row
    for row in range(rows):
        # Cycle through each column
        for col in range(cols):
            # If this pixel is white in the binary image
            if mask_image[row,col]:
                # Set pixel to white in aligned image
                aligned_img[row,col] = [255,255,255]
            # If the pixel is not white
            else:
                # Set pixel to black in aligned image
                aligned_img[row,col] = [0,0,0]

    # Translate processed cv2 image back to an Image message using existing encoding. This will be a generic encoding like 8UC3.
    msg = converter.cv2_to_imgmsg(aligned_img,"passthrough")

    # Assert encoding. CV generally uses bgr8.
    msg.encoding = "bgr8"

    # Publish image message
    pub.publish(msg)






def main():
    global _ws_hom, _ms_hom
    # Initialize ROS node
    rospy.init_node("image_processor_node")


    # Load homography data for image alignment
    rospack = rospkg.RosPack()
    path = rospack.get_path('mill_controller') + '/homographies/'
    try:
        _ws_hom = np.load(path + 'ws_hom.npy')
        _ms_hom = np.load(path + 'ms_hom.npy')
    except IOError:
        rospy.logerr("Error loading calibration. File not found. Run image_calibration node.")
        return 1



    # Initialize Main Subscriber
    rospy.Subscriber('raw_image',Image,callback)

    # Spin until shut down
    rospy.spin()





if __name__ == '__main__':
    main()
